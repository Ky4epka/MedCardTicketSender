; Script generated by the HM NIS Edit Script Wizard.


; HM NIS Edit Wizard helper DEFINES
!define PRODUCT_NAME "Заявки карт КБ-50"
!define PRODUCT_VERSION "1.00.00"
!define PRODUCT_PUBLISHER "Ky4epok"
!define PRODUCT_WEB_SITE "https://skb50.ru"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\ticketsender.exe"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKCU"
!define PRODUCT_LINK_NAME "Заявки карт КБ-50"
; For debugging
; Product will be installed if:
;  - New version value differed from old version value
;  - New version guid value differed from old guid value
!define PRODUCT_VERSION_GUID "94501068-E70B-425B-9EB8-FB5F7888660D"
!define INSTALL_DIR "$APPDATA\${PRODUCT_NAME}"

!define SOURCE_PATH_86 "C:\Users\Админ\source\repos\TicketSender\bin\Release\"
!define SOURCE_PATH_64 "C:\Users\Админ\source\repos\TicketSender\bin\Release\"

!define SOURCE_ADDONS "C:\Users\Админ\source\repos\TicketSender\Installer"

!define INSTALLER_OUTPUT "C:\Users\Админ\source\repos\TicketSender\Installer"

; MUI 1.67 compatible ------
!include "MUI.nsh"
!include LogicLib.nsh
!include x64.nsh

!define DOTNET_VERSION "4"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${SOURCE_ADDONS}\Icon.ico"
!define MUI_UNICON "${SOURCE_ADDONS}\Icon.ico"
;"$NSISDIR\Contrib\Graphics\Icons\modern-uninstall.ico"

; Не закрывать страницу установки после завершения
!define MUI_FINISHPAGE_NOAUTOCLOSE
; Welcome page
!insertmacro MUI_PAGE_WELCOME
; Components page
;!insertmacro MUI_PAGE_COMPONENTS
; Directory page
;!insertmacro MUI_PAGE_DIRECTORY
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "Russian"

; MUI end ------

/*
 * Author: Michael Mefford
 * Contact info: meffordm@gmail.com
 *
 * Usage: Push ${DotNetFrameworkVersion}
 *        Call CheckDotNetFramework
 *        Exch $R0
 *        StrCmp $R0 "0" found not_found
 *
 * Algorithm: ...
 *
 * Input: A .NET Framework version.  This must be verbatim, including major,
 *        minor, and build version - i.e.
 *
 *          1.1.4322
 *          2.0.50727
 *          3.0
 *          3.5
 *          4
 *          4.0
 *          .
 *          .
 *          .
 *          etc.
 *
 * Output: "0" if the requested .Net Framework version IS FOUND
 *         "1" if the requested .NET Framework version IS NOT FOUND
 *
 */
Function CheckDotNetFramework

  /* Exchange $R0 with the top of the stack to get the value passed by caller */
  Exch $R0

  /* Save other NSIS registers */
  Push $R1
  Push $R2
  Push $R3

  /* Zero out $R2 for the indexer */
  StrCpy $R2 "0"

loop:
  /* Get each sub key under "SOFTWARE\Microsoft\NET Framework Setup\NDP" */
  EnumRegKey $R1 HKLM "SOFTWARE\Microsoft\NET Framework Setup\NDP" $R3
  StrCmp $R1 "" version_not_found  /* Requested version is not found */

  StrCpy $R2 $R1 "" 1              /* Remove "v" from subkey */
  StrCmp $R2 $R0 version_found     /* Requested version is found */

  IntOp $R3 $R3 + 1                /* Increment registry key index */
  Goto loop

/* The requested .Net Framework version WAS NOT FOUND on this system */
version_not_found:
  /* Restore the registers saved earlier */
  Pop $R3
  Pop $R2
  Pop $R1
  Pop $R0

  Push "1"  /* Put "1" on the top of the stack for caller to use */
  Goto end

/* The requested .Net Framework version WAS FOUND on this system */
version_found:
  /* Restore the registers saved earlier */
  Pop $R3
  Pop $R2
  Pop $R1
  Pop $R0

  Push "0"  /* Put "0" on the top of the stack for caller to use */

end:

FunctionEnd



;     * FSSReportHandler commands:
;     *  help
;     *  prepare         - prepare report
;     *  reportFile      - file name to drops a data pairs
;     *  sendToServer    - Send to http server a report(format =httpLink in braces)
;     *  pushKeyValue    - Push key value pair (format =<key>|<value>, delimiter "|")
;     *  pushPCName      - Push PC name as value with key "ComputerName"
;     *  pushConsoleUserName - Push console user name as value with key "ConsoleUserName"

; Log fields
; FIELD_COMPUTER_NAME = "ComputerName";
; FIELD_CONSOLE_USER_NAME = "ConsoleUserName";
; FIELD_INSTALLATION_STARTED = "InstallationStarted";
; FIELD_INSTALLATION_OS_ARCH = "InstallationOSArch";
; FIELD_CRYPTOPRO_INSTALLED = "CryptoproInstalled";
; FIELD_GOSTLIB_REGISTERED = "GostlibRegistered";
; FIELD_FSS_INSTALLED = "FssInstalled";
; FIELD_INSTALLATION_FINISHED = "InstallationFinished";

RequestExecutionLevel user
Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "${INSTALLER_OUTPUT}\TicketSender_x86-64 v${PRODUCT_VERSION}.exe"
InstallDir "${INSTALL_DIR}"
InstallDirRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

/*  FindProcess.nsh
*
*   written by Donald Miller
*   Mar 7, 2007
*
*/

!include LogicLib.nsh
!include WordFunc.nsh
!insertmacro WordFind


!macro GetServerName SERVER_NAME_OUT
  System::Call 'kernel32.dll::GetComputerNameExW(i 4,w .r0,*i ${NSIS_MAX_STRLEN} r1)i.r2'
  ${If} $2 = 1
   StrCpy ${SERVER_NAME_OUT} "\\$0"
  ${Else}
   System::Call "kernel32.dll::GetComputerNameW(t .r0,*i ${NSIS_MAX_STRLEN} r1)i.r2"
   ${If} $2 = 1
    StrCpy ${SERVER_NAME_OUT} "\\$0"
   ${Else}
    StrCpy ${SERVER_NAME_OUT} ""
   ${EndIf}
  ${EndIf}
!macroend


Function WriteToFile
Exch $0 ;file to write to
Exch
Exch $1 ;text to write

  FileOpen $0 $0 a #open file
  FileSeek $0 0 END #go to end
  FileWrite $0 $1 #write to file
  FileClose $0

Pop $1
Pop $0
FunctionEnd

Function ClearFile
Exch $0 ;file to write to

  FileOpen $0 $0 w #open file
  FileSeek $0 0 END #go to end
  FileWrite $0 ` ` #write to file
  FileClose $0

Pop $0
FunctionEnd

!macro WriteToFile NewLine File String
  !if `${NewLine}` == true
  Push `${String}$\r$\n`
  !else
  Push `${String}`
  !endif
  Push `${File}`
  Call WriteToFile
!macroend
!define WriteToFile `!insertmacro WriteToFile false`
!define WriteLineToFile `!insertmacro WriteToFile true`

!macro FssReporter Params
  nsExec::ExecToLog '"$INSTDIR\FssReportHelper.exe" ${Params}'
!macroend

!macro IsVersionsDiffered BoolResult
  ${If} ${RunningX64}
    SetRegView 64
  ${Else}
    SetRegView 32
  ${EndIf}

  ReadRegStr $1 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion"
  ReadRegStr $2 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "VersionGUID"
  
  StrCmp $1 ${PRODUCT_VERSION} 0 DifferedVersionFlag
  StrCpy $3 "1"
  GoTo +2
DifferedVersionFlag:
  StrCpy $3 "0"

  StrCmp $2 ${PRODUCT_VERSION_GUID} 0 DifferedVersionGUIDFlag
  StrCpy $4 "1"
  GoTo +2
DifferedVersionGUIDFlag:
  StrCpy $4 "0"

  StrCmp $3 "1" 0 CheckDifferedProgramVersion
  StrCmp $4 "1" 0 CheckDifferedProgramVersion
  GoTo SameProgramVersion
SameProgramVersion:
  StrCpy ${BoolResult} "0"
  GoTo Exit
CheckDifferedProgramVersion:
  StrCmp $3 $4 0 DifferedProgramVersion
  StrCmp $3 "0" NotInstalled DifferedProgramVersion

DifferedProgramVersion:
  StrCpy ${BoolResult} "1"
  GoTo Exit

NotInstalled:
  StrCpy ${BoolResult} "-1"
  Goto Exit
Exit:
!macroend


Function UninstallProgram
  IfFileExists "${INSTALL_DIR}\uninstall.exe" uninstallFss skipUninstallFss
uninstallFss:
  DetailPrint "Удаление программы сборки ${PRODUCT_NAME}..."
  ExecWait "${INSTALL_DIR}\uninstall.exe /S _?" $0
  #ExecShellWait "open" "${INSTALL_DIR}\uninstall.exe"
  # $0
  DetailPrint "Удаление программы ${PRODUCT_NAME} завершено. Возвращен код: $0"
  Goto exit
skipUninstallFss:
  DetailPrint "Удаление предыдущей версии ${PRODUCT_NAME} не требуется"
exit:
FunctionEnd

Function Install32
  SetOverwrite on
  SetOutPath "$INSTDIR"
  File /r "${SOURCE_PATH_86}"
  WriteIniStr "$INSTDIR\version.ini" "MAIN" "VersionArchBit" "32"
  !insertmacro FssReporter "-pushkeyvalue=InstallationOSArch|86"
FunctionEnd

Function Install64
  SetOverwrite on
  SetOutPath "$INSTDIR"
  File /r "${SOURCE_PATH_64}"
  WriteIniStr "$INSTDIR\version.ini" "MAIN" "VersionArchBit" "64"
  !insertmacro FssReporter "-pushkeyvalue=InstallationOSArch|64"
FunctionEnd

Function CreateShortCuts
  DetailPrint "Создание ярлыков приложения..."
  SetShellVarContext current
  CreateDirectory "$SMPROGRAMS\${PRODUCT_NAME}"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\${PRODUCT_LINK_NAME}.lnk" "$INSTDIR\TicketSender.exe"
  CreateShortCut "$DESKTOP\${PRODUCT_LINK_NAME}.lnk" "$INSTDIR\TicketSender.exe"
  SetOutPath $INSTDIR
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Удаление программы.lnk" "$INSTDIR\uninstall.exe"
  DetailPrint "Создание ярлыков приложения завершено"
FunctionEnd

Function un.DeleteShortCuts
  DetailPrint "Удаление ярлыков приложения..."
  SetShellVarContext current
  Delete "$DESKTOP\${PRODUCT_LINK_NAME}.lnk"
  RMDir /r "$SMPROGRAMS\${PRODUCT_NAME}"
  DetailPrint "Удаление ярлыков приложения завершено"
FunctionEnd

Section "${PRODUCT_NAME} ${PRODUCT_VERSION}" SEC01
  SectionIn RO

  SetOutPath "$INSTDIR"
  WriteIniStr "$INSTDIR\version.ini" "MAIN" "Version" "${PRODUCT_VERSION}"

  !insertmacro IsVersionsDiffered $0

  ${If} ${RunningX64}
    Call Install64
  ${Else}
    Call Install32
  ${EndIf}

  Call CreateShortCuts

  !insertmacro FssReporter "-pushkeyvalue=FssInstalled|1 -pushkeyvalue=FssVersion|${PRODUCT_VERSION}"
SectionEnd

Section -AdditionalIcons
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninstall.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\TicketSender.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "${PRODUCT_NAME}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninstall.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\TicketSender.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "VersionGUID" "${PRODUCT_VERSION_GUID}"

  !insertmacro FssReporter '-pushkeyvalue=InstallationFinished|1 -sendtoserver=http://172.16.0.59/wp-content/plugins/TicketSenderLogger/index.php'
SectionEnd

; Section descriptions
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${SEC01} "Основные компоненты программы версии ${PRODUCT_VERSION}"
!insertmacro MUI_FUNCTION_DESCRIPTION_END


Function .onInit
  !insertmacro IsVersionsDiffered $0

  ${If} $0 = "0"
   MessageBox MB_ICONINFORMATION|MB_OK "Программа ${PRODUCT_NAME} той же версии ${PRODUCT_VERSION} уже установлена." /SD IDOK
   SetErrorLevel 15622
   Abort
  ${Endif}

  ${If} $0 = "1"
   MessageBox MB_ICONINFORMATION|MB_YESNO|MB_DEFBUTTON2 "Программа ${PRODUCT_NAME} версии ${PRODUCT_VERSION} уже установлена. Удалить уже установленную версию?" /SD IDYES IDNO abortMarker
   call UninstallProgram
   sleep 5000
   goto DoInstall
abortMarker:
   SetErrorLevel 15608
   MessageBox MB_ICONINFORMATION|MB_OK "Программа ${PRODUCT_NAME} той же версии ${PRODUCT_VERSION} уже установлена." IDOK
   Abort
  ${EndIf}
  
DoInstall:

  ReadEnvStr $0 COMSPEC
  nsExec::Exec '"$0" /C "taskkill /IM "TicketSender.exe""'
  
  sleep 3000

  Push ${DOTNET_VERSION}
  Call CheckDotNetFramework
  Exch $R0
  StrCmp $R0 "0" NetFx_Found NetFx_NotFound
NetFx_Found:
  SetOverwrite on
  SetOutPath "$INSTDIR"
  File "${SOURCE_ADDONS}\FssReportHelper.exe"
  File "${SOURCE_ADDONS}\RestSharp.dll"
  File "${SOURCE_ADDONS}\AnyDeskIdToReporter.bat"

  !insertmacro FssReporter "-prepare -pushkeyvalue=InstallationStarted|1 -pushpcname -pushconsoleusername"
  nsExec::ExecToLog '"$INSTDIR\AnyDeskIdToReporter.bat" "$INSTDIR\FssReportHelper.exe"'
  goto Continue
  
NetFx_NotFound:
   MessageBox MB_ICONINFORMATION|MB_OK "Программе ${PRODUCT_NAME} версии ${PRODUCT_VERSION} необходим Net framework не ниже версии ${DOTNET_VERSION}. Установите Net Framework и повторите установку." /SD IDOK
   Abort
   
Continue:
FunctionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "Удаление программы $(^Name) было успешно завершено." /SD IDOK
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Вы уверены в том, что желаете удалить $(^Name) и все компоненты программы?" /SD IDYES IDNO abortMarker
  Goto continueMarker
abortMarker:
  Abort
continueMarker:
FunctionEnd

Section Uninstall
  Call un.DeleteShortCuts

  RMDir /r "$INSTDIR"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DIR_REGKEY}"
  SetAutoClose true
SectionEnd